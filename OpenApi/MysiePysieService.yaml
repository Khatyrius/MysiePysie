openapi: 3.0.0
info:
  title: MysiePysie Service
  description: |
    Mysie Pysie Service for UZ Project with collaboration with Metapack
  contact:
    email: bartosz_musielak@hotmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.0.1
servers:
- url: https://virtserver.swaggerhub.com/MysiePysie/MysiePysie/0.0.1
  description: SwaggerHub API Auto Mocking
- url: localhost:8080
paths:
  /students:
    get:
      tags:
      - students
      summary: Returns all existing sutdents
      operationId: getStudents
      responses:
        "200":
          description: successful oepration
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
        "404":
          description: Students not found
        "500":
          description: Server error
    put:
      tags:
      - students
      summary: Update an existing student
      operationId: updateStudent
      requestBody:
        $ref: '#/components/requestBodies/Student'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Student not found
        "405":
          description: Validation exception
    post:
      tags:
      - students
      summary: Add a new student to the database
      operationId: addStudent
      requestBody:
        $ref: '#/components/requestBodies/Student'
      responses:
        "405":
          description: Invalid input
  /students/{studentId}:
    get:
      tags:
      - students
      summary: Find student by ID
      description: Returens a single student
      operationId: getStudentById
      parameters:
      - name: studentId
        in: path
        description: ID of student to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Student'
            application/xml:
              schema:
                $ref: '#/components/schemas/Student'
        "400":
          description: Invalid ID supplied
        "404":
          description: Student not found
    post:
      tags:
      - students
      summary: Updates a student in the database with form data
      operationId: updateStudentWithForm
      parameters:
      - name: studentId
        in: path
        description: ID of student that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body'
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - students
      summary: Deletes a student
      operationId: deleteStudent
      parameters:
      - name: api_key
        in: header
        required: false
        style: simple
        explode: false
        schema:
          type: string
      - name: studentId
        in: path
        description: Student id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Student not found
  /teachers:
    get:
      tags:
      - teachers
      summary: Returns all existing teachers
      operationId: getTeachers
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        "404":
          description: Teachers not found
        "500":
          description: Server error
    put:
      tags:
      - teachers
      summary: Update an existing teacher
      operationId: updateTeacher
      requestBody:
        $ref: '#/components/requestBodies/Teacher'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Teacher not found
        "405":
          description: Validation exception
    post:
      tags:
      - teachers
      summary: Add a new teacher to the database
      operationId: addTeacher
      requestBody:
        $ref: '#/components/requestBodies/Teacher'
      responses:
        "405":
          description: Invalid input
  /teachers/findBySubject:
    get:
      tags:
      - teachers
      summary: Finds teachers by subject taught
      description: Teachers can only teach one subject
      operationId: findTeachersBySubject
      parameters:
      - name: subject
        in: query
        description: Subject to filter by
        required: true
        style: form
        explode: true
        schema:
          type: array
          items:
            type: string
            default: none
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Teacher'
        "400":
          description: Invalid subject value
  /teachers/{teacherId}:
    get:
      tags:
      - teachers
      summary: Find teacher by ID
      description: Returens a single teacher
      operationId: getTeacherById
      parameters:
      - name: teacherId
        in: path
        description: ID of teacher to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Teacher'
            application/xml:
              schema:
                $ref: '#/components/schemas/Teacher'
        "400":
          description: Invalid ID supplied
        "404":
          description: Teacher not found
    post:
      tags:
      - teachers
      summary: Updates a teacher in the database with form data
      operationId: updateTeacherWithForm
      parameters:
      - name: teacherId
        in: path
        description: ID of teacher that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_1'
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - teachers
      summary: Deletes a teacher
      operationId: deleteTeacher
      parameters:
      - name: teacherId
        in: path
        description: Teacher id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Teacher not found
  /subjects:
    get:
      tags:
      - subjects
      summary: Returns all existing subjects
      operationId: getSubjects
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Subject'
        "404":
          description: Subjects not found
        "500":
          description: Server error
    put:
      tags:
      - subjects
      summary: Update an existing subject
      operationId: updateSubject
      requestBody:
        $ref: '#/components/requestBodies/Subject'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Subject not found
        "405":
          description: Validation exception
    post:
      tags:
      - subjects
      summary: Add a new subject to the database
      operationId: addSubject
      requestBody:
        $ref: '#/components/requestBodies/Subject'
      responses:
        "405":
          description: Invalid input
  /subjects/{subjectId}:
    get:
      tags:
      - subjects
      summary: Find subject by ID
      description: Returens a single subject
      operationId: getSubjectById
      parameters:
      - name: subjectId
        in: path
        description: ID of subject to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subject'
            application/xml:
              schema:
                $ref: '#/components/schemas/Subject'
        "400":
          description: Invalid ID supplied
        "404":
          description: Subject not found
    post:
      tags:
      - subjects
      summary: Updates a subject in the database with form data
      operationId: updateSubjectWithForm
      parameters:
      - name: subjectId
        in: path
        description: ID of subject that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_2'
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - subjects
      summary: Deletes a subject
      operationId: deleteSubject
      parameters:
      - name: subjectId
        in: path
        description: Subject id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Subject not found
  /classes:
    get:
      tags:
      - classes
      summary: Returns all existing classes
      operationId: getClasses
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Class'
        "404":
          description: Classes not found
        "500":
          description: Server error
    put:
      tags:
      - classes
      summary: Update an existing class
      operationId: updateClass
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Class not found
        "405":
          description: Validation exception
    post:
      tags:
      - classes
      summary: Add a new class to the database
      operationId: addClass
      requestBody:
        $ref: '#/components/requestBodies/Class'
      responses:
        "405":
          description: Invalid input
  /classes/{classId}:
    get:
      tags:
      - classes
      summary: Find class by ID
      description: Returns a single class
      operationId: getClassById
      parameters:
      - name: classId
        in: path
        description: ID of class to return
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "200":
          description: successfull operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Class'
            application/xml:
              schema:
                $ref: '#/components/schemas/Class'
        "400":
          description: Invalid ID supplied
        "404":
          description: Class not found
    post:
      tags:
      - classes
      summary: Updates a class in the database with form data
      operationId: updateClassWithForm
      parameters:
      - name: classId
        in: path
        description: ID of class that needs to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/body_3'
      responses:
        "405":
          description: Invalid input
    delete:
      tags:
      - classes
      summary: Deletes a class
      operationId: deleteClass
      parameters:
      - name: classId
        in: path
        description: Class id to delete
        required: true
        style: simple
        explode: false
        schema:
          type: integer
          format: int64
      responses:
        "400":
          description: Invalid ID supplied
        "404":
          description: Class not found
  /user:
    post:
      tags:
      - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        default:
          description: successful operation
  /user/createWithArray:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithArrayInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/createWithList:
    post:
      tags:
      - user
      summary: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        $ref: '#/components/requestBodies/UserArray'
      responses:
        default:
          description: successful operation
  /user/login:
    get:
      tags:
      - user
      summary: Logs user into the system
      operationId: loginUser
      parameters:
      - name: username
        in: query
        description: The user name for login
        required: true
        style: form
        explode: true
        schema:
          type: string
      - name: password
        in: query
        description: The password for login in clear text
        required: true
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              style: simple
              explode: false
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              style: simple
              explode: false
              schema:
                type: string
                format: date-time
          content:
            application/json:
              schema:
                type: string
            application/xml:
              schema:
                type: string
        "400":
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
      - user
      summary: Logs out current logged in user session
      operationId: logoutUser
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
      - user
      summary: Get user by user name
      operationId: getUserByName
      parameters:
      - name: username
        in: path
        description: The name that needs to be fetched. Use user1 for testing.
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
    put:
      tags:
      - user
      summary: Updated user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
      - name: username
        in: path
        description: name that need to be updated
        required: true
        style: simple
        explode: false
        schema:
          type: string
      requestBody:
        description: Updated user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      responses:
        "400":
          description: Invalid user supplied
        "404":
          description: User not found
    delete:
      tags:
      - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
      - name: username
        in: path
        description: The name that needs to be deleted
        required: true
        style: simple
        explode: false
        schema:
          type: string
      responses:
        "400":
          description: Invalid username supplied
        "404":
          description: User not found
components:
  schemas:
    Student:
      type: object
      properties:
        id:
          type: integer
          format: int64
        forename:
          type: string
        surename:
          type: string
        age:
          type: integer
          format: int64
        status:
          type: string
      xml:
        name: Student
    Teacher:
      type: object
      properties:
        id:
          type: integer
          format: int64
        forename:
          type: string
        surname:
          type: string
        age:
          type: integer
          format: int64
      xml:
        name: Teacher
    Subject:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        ECTSpoints:
          type: integer
          format: int64
        teacher:
          type: object
      xml:
        name: Subject
    Class:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        students:
          type: array
          items:
            $ref: '#/components/schemas/Student'
      xml:
        name: Class
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
        password:
          type: string
        phone:
          type: string
        userStatus:
          type: integer
          description: User Status
          format: int32
      xml:
        name: User
    body:
      type: object
      properties:
        forename:
          type: string
          description: Updated forename of a student
        surname:
          type: string
          description: Updated surname of a studnet
        class:
          type: string
          description: Updated class of a student
        age:
          type: integer
          description: Updated age of a student
          format: int64
        status:
          type: string
          description: Updated status of a studnet
    body_1:
      type: object
      properties:
        forename:
          type: string
          description: Updated forename of a teacher
        surname:
          type: string
          description: Updated surname of a teacher
        subject:
          type: string
          description: Updated subject of a teacher
        age:
          type: integer
          description: Updated age of a teacher
          format: int64
        status:
          type: string
          description: Updated status of a teacher
    body_2:
      type: object
      properties:
        name:
          type: string
          description: Updated name of a subject
        ECTSpoints:
          type: integer
          description: Updated ECTS point value of a subject
          format: int64
    body_3:
      type: object
      properties:
        name:
          type: string
          description: Updated name of a class
  requestBodies:
    Student:
      description: Student object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Student'
        application/xml:
          schema:
            $ref: '#/components/schemas/Student'
      required: true
    Teacher:
      description: Teacher object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Teacher'
        application/xml:
          schema:
            $ref: '#/components/schemas/Teacher'
      required: true
    Subject:
      description: Subject object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Subject'
        application/xml:
          schema:
            $ref: '#/components/schemas/Subject'
      required: true
    Class:
      description: Class object that needs to be added to the database
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Class'
        application/xml:
          schema:
            $ref: '#/components/schemas/Class'
      required: true
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: '#/components/schemas/User'
      required: true
